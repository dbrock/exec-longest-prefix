#!/bin/bash
set -e -o pipefail

function die { echo "$*" >&2; exit 1; }
function canonicalize {
  if test `uname` = Linux; then
    readlink --canonicalize "$@"
  elif test `uname` = Darwin; then
    if which greadlink >/dev/null; then
      greadlink --canonicalize "$@"
    else
      die "plz: error: command not found: greadlink
Please run \`brew install coreutils'."
    fi
  else
    die "plz: error: operating system not supported: `uname`"
  fi
}

if test -f .env; then
  while read line; do
    export "$line"
  done < .env
fi

if test -n "$PLZ_FILE" && test -n "$PLZ_CDUP"; then
  export PROGRAM_NAME=`basename $PLZ_FILE`
  file=`canonicalize "$PLZ_FILE"`
  home=`dirname "$file"`/$PLZ_CDUP
  export PROGRAM_HOME=`canonicalize "$home"`
  libexec=$PROGRAM_HOME/${PLZ_LIBEXEC-libexec}
else
  die "plz: error: missing \$PLZ_FILE and/or \$PLZ_CDUP"
fi

test -z "$PLZ_TRACE" ||
echo plz: trace: PROGRAM_NAME=$PROGRAM_NAME libexec=$libexec >&2
test -d $libexec || die "plz: error: no such directory: $libexec"
test $# != 0 || set -- --default-command

function run {
  test -z "$PLZ_TRACE" ||
  echo plz: trace: exec `git rev-parse --sq-quote "$@"` >&2
  exec "$@"
}

for i in `seq $# | sort -nr`; do
  file="$libexec/${@:1:$i}"
  if test -f "$file" && test -x "$file"; then
    run "$file" "${@:$(($i + 1))}"
  elif test -L "$file"; then
    run `canonicalize "$file"` "${@:$(($i + 1))}"
  fi
done

if test -f "$libexec"/--no-such-command; then
  run "$libexec"/--no-such-command "$@"
else
  die "$PROGRAM_NAME: error: no such command: $*"
fi
